/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IMakerContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMakerContract__factory>;
    getContractFactory(
      name: "MakerContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MakerContract__factory>;
    getContractFactory(
      name: "FinalMarketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinalMarketplace__factory>;
    getContractFactory(
      name: "OzNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OzNFT__factory>;
    getContractFactory(
      name: "SimpleNFTs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleNFTs__factory>;
    getContractFactory(
      name: "NFTCollection",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTCollection__factory>;
    getContractFactory(
      name: "StubMaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StubMaker__factory>;
    getContractFactory(
      name: "StubNFTMarketplaceIf",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StubNFTMarketplaceIf__factory>;
    getContractFactory(
      name: "StubNFTMarketplaceImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StubNFTMarketplaceImpl__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IMakerContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMakerContract>;
    getContractAt(
      name: "MakerContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MakerContract>;
    getContractAt(
      name: "FinalMarketplace",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinalMarketplace>;
    getContractAt(
      name: "OzNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OzNFT>;
    getContractAt(
      name: "SimpleNFTs",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleNFTs>;
    getContractAt(
      name: "NFTCollection",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTCollection>;
    getContractAt(
      name: "StubMaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StubMaker>;
    getContractAt(
      name: "StubNFTMarketplaceIf",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StubNFTMarketplaceIf>;
    getContractAt(
      name: "StubNFTMarketplaceImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StubNFTMarketplaceImpl>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
