/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MakerContractInterface extends ethers.utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addContract(address)": FunctionFragment;
    "getAdmin(uint256)": FunctionFragment;
    "getAdminCount()": FunctionFragment;
    "getCompanyName()": FunctionFragment;
    "getContractCount()": FunctionFragment;
    "getContracts()": FunctionFragment;
    "getLogoUri()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "addContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanyName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLogoUri",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdminCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLogoUri", data: BytesLike): Result;

  events: {};
}

export class MakerContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MakerContractInterface;

  functions: {
    addAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAdminCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCompanyName(overrides?: CallOverrides): Promise<[string]>;

    getContractCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getLogoUri(overrides?: CallOverrides): Promise<[string]>;
  };

  addAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addContract(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getAdminCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCompanyName(overrides?: CallOverrides): Promise<string>;

  getContractCount(overrides?: CallOverrides): Promise<BigNumber>;

  getContracts(overrides?: CallOverrides): Promise<string[]>;

  getLogoUri(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    addContract(_address: string, overrides?: CallOverrides): Promise<void>;

    getAdmin(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getAdminCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCompanyName(overrides?: CallOverrides): Promise<string>;

    getContractCount(overrides?: CallOverrides): Promise<BigNumber>;

    getContracts(overrides?: CallOverrides): Promise<string[]>;

    getLogoUri(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdminCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCompanyName(overrides?: CallOverrides): Promise<BigNumber>;

    getContractCount(overrides?: CallOverrides): Promise<BigNumber>;

    getContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getLogoUri(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdminCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompanyName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLogoUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
