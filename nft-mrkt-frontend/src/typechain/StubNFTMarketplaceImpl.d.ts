/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StubNFTMarketplaceImplInterface extends ethers.utils.Interface {
  functions: {
    "addMakerProductLines(address,address)": FunctionFragment;
    "buyItem(address)": FunctionFragment;
    "createNftCollectionContract((string,string,string,string,address,address,uint256))": FunctionFragment;
    "getAllCollectionsForSale()": FunctionFragment;
    "getMakerContractFromAdmin(address)": FunctionFragment;
    "getMakerProductLines(address)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "setMakerContractFromAdmin(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMakerProductLines",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "buyItem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createNftCollectionContract",
    values: [
      {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollectionsForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerContractFromAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerProductLines",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMakerContractFromAdmin",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMakerProductLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNftCollectionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollectionsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerContractFromAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerProductLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMakerContractFromAdmin",
    data: BytesLike
  ): Result;

  events: {
    "BuyItem(address,address,uint256)": EventFragment;
    "CreateNftCollectionContract(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyItem"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreateNftCollectionContract"
  ): EventFragment;
}

export type BuyItemEvent = TypedEvent<
  [string, string, BigNumber] & {
    nftContractAddress: string;
    buyer: string;
    tokenId: BigNumber;
  }
>;

export type CreateNftCollectionContractEvent = TypedEvent<
  [string, string] & { nftContractAddress: string; seller: string }
>;

export class StubNFTMarketplaceImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StubNFTMarketplaceImplInterface;

  functions: {
    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyItem(
      collectionAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllCollectionsForSale(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, string, string, BigNumber] & {
          productName: string;
          symbol: string;
          metadataURI: string;
          imageURI: string;
          makerAddress: string;
          nftContractAddress: string;
          price: BigNumber;
        })[]
      ] & {
        collections: ([
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber
        ] & {
          productName: string;
          symbol: string;
          metadataURI: string;
          imageURI: string;
          makerAddress: string;
          nftContractAddress: string;
          price: BigNumber;
        })[];
      }
    >;

    getMakerContractFromAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMakerContractFromAdmin(
      _makerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMakerProductLines(
    _maker: string,
    _newProductLine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyItem(
    collectionAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftCollectionContract(
    _newNftCollection: {
      productName: string;
      symbol: string;
      metadataURI: string;
      imageURI: string;
      makerAddress: string;
      nftContractAddress: string;
      price: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllCollectionsForSale(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, string, string, BigNumber] & {
      productName: string;
      symbol: string;
      metadataURI: string;
      imageURI: string;
      makerAddress: string;
      nftContractAddress: string;
      price: BigNumber;
    })[]
  >;

  getMakerContractFromAdmin(
    _admin: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMakerProductLines(
    _maker: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPrice(
    collectionAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMakerContractFromAdmin(
    _makerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItem(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getAllCollectionsForSale(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, string, string, BigNumber] & {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumber;
      })[]
    >;

    getMakerContractFromAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMakerContractFromAdmin(
      _makerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyItem(address,address,uint256)"(
      nftContractAddress?: string | null,
      buyer?: string | null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nftContractAddress: string; buyer: string; tokenId: BigNumber }
    >;

    BuyItem(
      nftContractAddress?: string | null,
      buyer?: string | null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nftContractAddress: string; buyer: string; tokenId: BigNumber }
    >;

    "CreateNftCollectionContract(address,address)"(
      nftContractAddress?: string | null,
      seller?: string | null
    ): TypedEventFilter<
      [string, string],
      { nftContractAddress: string; seller: string }
    >;

    CreateNftCollectionContract(
      nftContractAddress?: string | null,
      seller?: string | null
    ): TypedEventFilter<
      [string, string],
      { nftContractAddress: string; seller: string }
    >;
  };

  estimateGas: {
    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyItem(
      collectionAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllCollectionsForSale(overrides?: CallOverrides): Promise<BigNumber>;

    getMakerContractFromAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMakerContractFromAdmin(
      _makerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyItem(
      collectionAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllCollectionsForSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMakerContractFromAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMakerContractFromAdmin(
      _makerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
